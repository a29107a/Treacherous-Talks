#!/bin/bash
# This script will run local (unit/application) tests and/or integration tests.

# Default settings (can be changed with command line options)
dolocal=1
dointegration=1

# Internal variables
cwd=$(pwd)
errors=0

# Get command-line arguments
while [ $# -gt 0 ]
do
    case "$1" in
        -ni) dointegration=0;;
        -nl) dolocal=0;;
        -*)  echo >&2 "usage: $0 [-ni] [-nl]"
             echo >&2 "       -ni      do not run integration tests"
             echo >&2 "       -nl      do not run local (unit) tests"
             exit 1;;
        *)   break;;
    esac
done

# Color definitions
c_red="\033[31m"
c_brown="\033[33m"
c_reset="\033[0m"

# Convenience function for echoing to stderr
function echoerr() { echo -e $c_red##### "$@" 1>&2 $c_reset; }
# Convenience function for normal echoing with brown color
function echonormal() { echo -e $c_brown##### "$@" $c_reset; }

# This is a wrapper function that takes one argument, the command to run, and
# executes it.
function run_wrapper () {
    $1
    case "$?" in
        0) echonormal "Exit status: success\n" ;;
        *) echoerr "Exit status: ERROR\n"
           errors=1 ;;
    esac
}

#################################

# Do eunit (local) tests
if [ $dolocal -eq 1 ]; then
    echonormal "running eunit tests"
    run_wrapper "./rebar eunit skip_deps=true"
fi

# Do integration tests
if [ $dointegration -eq 1 ]; then

    cd $cwd
    echonormal "releasing backend"
    run_wrapper "./release backend"
    backend=system-release/backend/bin/backend
    echonormal "starting backend and waiting 5 seconds"
    run_wrapper "$backend start"
    sleep 5

    echonormal "releasing xmpp_frontend..."
    run_wrapper "./release xmpp_frontend"
    echonormal "installing xmpp_frontend for frontend tests"
    cd $cwd/system-release/xmpp_frontend
    run_wrapper "make clean install"
    ejdctl=system-release/xmpp_frontend/installation/sbin/ejabberdctl
    cd $cwd

    echonormal "running xmpp_frontend tests"
    echonormal "starting ejabberd and waiting 10 seconds"
    run_wrapper "$cwd/$ejdctl start"
    sleep 10 # TODO: Use erik's pinging blocking script instead of naive sleep.

    echo "ejabberd status:"
    $cwd/$ejdctl status || errors=1
    cd ext_test/ejabberd_echo || errors=1
    run_wrapper "$cwd/rebar eunit skip_deps=true"
    echonormal "stopping ejabberd"
    run_wrapper "$cwd/$ejdctl stop"
    cd $cwd

    echonormal "stopping backend"
    run_wrapper "$backend stop"

fi


if (( errors )); then
    echoerr "Test run was NOT successfull."
else
    echonormal "Test run was successfull."
fi

exit $errors
