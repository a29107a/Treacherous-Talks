#!/bin/bash
# This script will run local (unit/application) tests and/or integration tests.

# Get common functions
source common_bash_functions.sh

# Default settings (can be changed with command line options)
dolocal=1
dointegration=1

# Internal variables
cwd=$(pwd)
errors=0

# Get command-line arguments
while [ $# -gt 0 ]
do
    case "$1" in
        -ni) dointegration=0;;
        -nl) dolocal=0;;
        -*)  echo >&2 "usage: $0 [-ni] [-nl]"
             echo >&2 "       -ni      do not run integration tests"
             echo >&2 "       -nl      do not run local (unit) tests"
             exit 1;;
        *)   break;;
    esac
    shift
done

#################################

# Do eunit (local) tests
if [ $dolocal -eq 1 ]; then
    run_script "running eunit tests" "./rebar eunit skip_deps=true"
fi

# Do integration tests
if [ $dointegration -eq 1 ]; then

    cd $cwd

    # Release and start backend
    run_script "releasing backend" "./release -nd backend"
    backend=system-release/backend/bin/backend
    run_script "starting backend" "$backend start"

    # Release and install xmpp_frontend
    run_script "releasing xmpp_frontend" "./release -nd xmpp_frontend"
    cd $cwd/system-release/xmpp_frontend
    run_script "installing xmpp_frontend for frontend tests" "make clean install"
    ejdctl=system-release/xmpp_frontend/installation/sbin/ejabberdctl
    cd $cwd

    # Start xmpp_frontend
    echonormal "running xmpp_frontend tests"
    run_script "starting ejabberd and waiting 10 seconds" "$cwd/$ejdctl start"
    sleep 10 # TODO: Use erik's pinging blocking script instead of naive sleep.
    echo "ejabberd status:"
    $cwd/$ejdctl status || errors=1

    # Run tests
    cd ext_test/ejabberd_echo || errors=1
    run_script "running tests" "$cwd/rebar eunit skip_deps=true"

    # Stop backend and xmpp_frontend
    run_script "stopping ejabberd" "$cwd/$ejdctl stop"
    cd $cwd
    stop_release "system-release" "backend"

fi


# Exit
print_exit_status "Test run" $errors
exit $errors
