#!/bin/bash

# Define default environment variables.
# This node setting applies only if both no node is given on commandline
# and no vm.args file can be found.
NODE=xmpp_frontend
HOST=127.0.0.1
ERLANG_NODE=$NODE@$HOST
ERLANG_COOKIE=treacherous_talks
INSTALLUSER=

# parse command line parameters
ARGS=
while [ $# -ne 0 ] ; do
    PARAM=$1
    shift
    case $PARAM in
        --) break ;;
        --node) ERLANG_NODE_ARG=$1; shift ;;
        --config-dir) ETCDIR=$1 ; shift ;;
        --config) EJABBERD_CONFIG_PATH=$1 ; shift ;;
        --ctl-config) EJABBERDCTL_CONFIG_PATH=$1 ; shift ;;
        --logs) LOGS_DIR=$1 ; shift ;;
        --spool) SPOOLDIR=$1 ; shift ;;
        *) ARGS="$ARGS $PARAM" ;;
    esac
done

# Define ejabberd variables if they have not been defined from the command line
pushd "$(dirname $0)/.." > /dev/null
BASEDIR=$(pwd)
popd > /dev/null
if [ "$ETCDIR" = "" ] ; then
    ETCDIR="$BASEDIR/etc"
fi
if [ "$EJABBERD_CONFIG_PATH" = "" ] ; then
    EJABBERD_CONFIG_PATH="$ETCDIR/ejabberd.cfg"
fi
if [ "$EJABBERDCTL_CONFIG_PATH" = "" ] ; then
    EJABBERDCTL_CONFIG_PATH="$ETCDIR/vm.args"
fi
if [ "$LOGS_DIR" = "" ] ; then
    LOGS_DIR="$BASEDIR/log"
fi
if [ "$SPOOLDIR" = "" ] ; then
    SPOOLDIR="$BASEDIR/var/lib/ejabberd"
fi
if [ "$EJABBERD_DOC_PATH" = "" ] ; then
    EJABBERD_DOC_PATH="$BASEDIR/doc/ejabberd"
fi
if [ "$ERLANG_NODE_ARG" != "" ] ; then
    ERLANG_NODE=$ERLANG_NODE_ARG
    NAME=-name
    [ "$ERLANG_NODE" = "${ERLANG_NODE%.*}" ] && NAME=-sname
fi

# Read vm.args config file, but take care to give command line higher priority
if [ -f "$EJABBERDCTL_CONFIG_PATH" ] ; then
    if [ "$ERLANG_NODE_ARG" = "" ] ; then
        NAME=$(grep -E '^(-sname|-name)' "$EJABBERDCTL_CONFIG_PATH" | cut -d' ' -f1)
        ERLANG_NODE=$(grep -E '^(-sname|-name)' "$EJABBERDCTL_CONFIG_PATH" | cut -d' ' -f2)
    fi
    ERLANG_COOKIE=$(grep -E '^-setcookie' "$EJABBERDCTL_CONFIG_PATH" | cut -d' ' -f2)
fi

# check the proper system user is used
ID=`id -g`
GIDS=`id -G`
EJID=`id -g $INSTALLUSER`
EXEC_CMD="false"
for GID in $GIDS; do
    if [ $GID -eq 0 ] ; then
	EXEC_CMD="su ${INSTALLUSER} -p -c"
    fi
done
if [ "$ID" -eq "$EJID" ] ; then
	EXEC_CMD="sh -c"
fi
if [ "$EXEC_CMD" = "false" ] ; then
	echo "This command can only be run by root or the user $INSTALLUSER" >&2
	exit 4
fi

KERNEL_OPTS=""
if [ "$FIREWALL_WINDOW" != "" ] ; then
    KERNEL_OPTS="${KERNEL_OPTS} -kernel inet_dist_listen_min ${FIREWALL_WINDOW%-*} inet_dist_listen_max ${FIREWALL_WINDOW#*-}"
fi
if [ "$INET_DIST_INTERFACE" != "" ] ; then
    KERNEL_OPTS="${KERNEL_OPTS} -kernel inet_dist_use_interface \"${INET_DIST_INTERFACE}\""
fi

# define additional environment variables
if [ "$EJABBERDDIR" = "" ]; then
    ejabberd_versioned=$(ls -1 "$BASEDIR/lib/" | grep -v .ez | grep ejabberd)
    EJABBERDDIR="$BASEDIR/lib/$ejabberd_versioned"
fi
if [ "$EJABBERD_EBIN_PATH" = "" ]; then
    EJABBERD_EBIN_PATH=$EJABBERDDIR/ebin
fi
if [ "$EJABBERD_PRIV_PATH" = "" ]; then
    EJABBERD_PRIV_PATH=$EJABBERDDIR/priv
fi
if [ "$EJABBERD_BIN_PATH" = "" ]; then
    EJABBERD_BIN_PATH=$EJABBERD_PRIV_PATH/bin
fi
if [ "$EJABBERD_SO_PATH" = "" ]; then
    EJABBERD_SO_PATH=$EJABBERD_PRIV_PATH/lib
fi
if [ "$EJABBERD_MSGS_PATH" = "" ]; then
    EJABBERD_MSGS_PATH=$EJABBERD_PRIV_PATH/msgs
fi

EJABBERD_LOG_PATH=$LOGS_DIR/ejabberd.log
SASL_LOG_PATH=$LOGS_DIR/erlang.log
DATETIME=`date "+%Y%m%d-%H%M%S"`
ERL_CRASH_DUMP=$LOGS_DIR/erl_crash_$DATETIME.dump
ERL_INETRC=$ETCDIR/inetrc
HOME=$SPOOLDIR

# create the home dir with the proper user if doesn't exist, because it stores cookie file
[ -d $HOME ] || $EXEC_CMD "mkdir -p $HOME"

# Change to a directory readable by INSTALLUSER to
# prevent "File operation error: eacces." messages
cd $HOME

# export global variables
export EJABBERD_CONFIG_PATH
export EJABBERD_MSGS_PATH
export EJABBERD_LOG_PATH
export EJABBERD_SO_PATH
export EJABBERD_BIN_PATH
export EJABBERD_DOC_PATH
export EJABBERD_PID_PATH
export ERL_CRASH_DUMP
export ERL_EPMD_ADDRESS
export HOME
export EXEC_CMD

# Compatibility in ZSH
setopt shwordsplit 2>/dev/null

# common control function
ctl ()
{
    COMMAND=$@

    # Control number of connections identifiers
    # using flock if available. Expects a linux-style
    # flock that can lock a file descriptor.
    MAXCONNID=100
    CONNLOCKDIR="$BASEDIR/var/ejabberdctl.lock"
    FLOCK='/usr/bin/flock'
    if [ ! -x "$FLOCK" ] || [ ! -d "$CONNLOCKDIR" ] ; then
        JOT='/usr/bin/jot'
        if [ ! -x "$JOT" ] ; then
            # no flock or jot, simply invoke ctlexec()
            CTL_CONN="ctl-${ERLANG_NODE}"
            ctlexec $CTL_CONN $COMMAND
            result=$?
        else
            # no flock, but at least there is jot
            RAND=`jot -r 1 0 $MAXCONNID`
            CTL_CONN="ctl-${RAND}-${ERLANG_NODE}"
            ctlexec $CTL_CONN $COMMAND
            result=$?
        fi
    else
        # we have flock so we get a lock
        # on one of a limited number of
        # conn names -- this allows
        # concurrent invocations using a bound
        # number of atoms
        for N in $(seq 1 $MAXCONNID); do
            CTL_CONN="ejabberdctl-$N"
            CTL_LOCKFILE="$CONNLOCKDIR/$CTL_CONN"
            (
            exec 8>"$CTL_LOCKFILE"
            if flock --nb 8; then
                ctlexec $CTL_CONN $COMMAND
                ssresult=$?
                # segregate from possible flock exit(1)
                ssresult=$(expr $ssresult \* 10)
                exit $ssresult
            else
                exit 1
            fi
            )
            result=$?
            if [ $result -eq 1 ]; then
                # means we errored out in flock
                # rather than in the exec - stay in the loop
                # trying other conn names...
                badlock=1
            else
                badlock=""
                break;
            fi
        done
        result=$(expr $result / 10)
    fi

    if [ "$badlock" ];then
        echo "Ran out of connections to try. Your ejabberd processes" >&2
        echo "may be stuck or this is a very busy server. For very"   >&2
        echo "busy servers, consider raising MAXCONNID in ejabberdctl">&2
        exit 1;
    fi

    case $result in
        0) :;;
        1) :;;
    esac
    return $result
}

ctlexec ()
{
    CONN_NAME=$1; shift
    COMMAND=$@

    CTLEXEC="erl \
        $NAME ${CONN_NAME} \
        -setcookie $ERLANG_COOKIE \
        -noinput \
        -hidden \
        -pa $EJABBERD_EBIN_PATH \
        $KERNEL_OPTS \
        -s ejabberd_ctl -extra $ERLANG_NODE"

    # quote input from the command line
    for i in $COMMAND; do
        CTLEXEC="$CTLEXEC '$i'";
    done

    #echo "running: $EXEC_CMD '$CTLEXEC'"
    $EXEC_CMD "$CTLEXEC"
}

ctl $ARGS
