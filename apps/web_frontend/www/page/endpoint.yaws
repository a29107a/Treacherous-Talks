<erl>
%%%-------------------------------------------------------------------
%%% @copyright
%%% COPYRIGHT
%%% @end
%%%-------------------------------------------------------------------
%%% @author Sukumar Yethadka <sbhat7@gmail.com>
%%%
%%% @doc Websocket endpoint
%%%
%%% @since : 25 Oct 2011 by Bermuda Triangle
%%% @end
%%%-------------------------------------------------------------------

-include_lib("datatypes/include/user.hrl").
-include_lib("datatypes/include/game.hrl").

%%-------------------------------------------------------------------
%% @doc
%% Yaws function that gets called when an endpoint is requested.
%% The function creates a process for every websocket connection.
%% @end
%%-------------------------------------------------------------------
out(A) ->
    io:format("Spawning websocket owner~n",[]),
    WebSocketOwner = spawn(fun() -> websocket_owner() end),
    {websocket, WebSocketOwner, true}.


%%-------------------------------------------------------------------
%% @doc
%% Websocket owner - function to start the websocket server
%% @end
%%-------------------------------------------------------------------
websocket_owner() ->
    receive
    {ok, WebSocket, ProtocolVersion} ->
        socket_server(WebSocket, ProtocolVersion);
    _ -> ok
    end.


%%-------------------------------------------------------------------
%% @doc
%% Websocket server
%% @end
%%-------------------------------------------------------------------
socket_server(WebSocket, ProtocolVersion) ->
    receive
    {tcp, WebSocket, DataFrame} ->
        Data = yaws_api:websocket_unframe_data(ProtocolVersion, DataFrame),
        io:format("Got data from Websocket: ~p~n", [Data]),
        ParsedCmd = web_parser:parse(json_decode(Data)),
        io:format("Parsed command: ~p~n", [ParsedCmd]),
        controller:handle_action(ParsedCmd,
                                 {fun reply/3, [WebSocket, ProtocolVersion]}),
        socket_server(WebSocket, ProtocolVersion);
    {tcp_closed, WebSocket} ->
        io:format("Websocket closed. Terminating socket_server...~n");
    Any ->
        io:format("socket_server received msg:~p~n", [Any]),
        socket_server(WebSocket, ProtocolVersion)
    end.

%%-------------------------------------------------------------------
%% @doc
%% Callback functions that gets called by controller
%% @end
%%-------------------------------------------------------------------
reply([WebSocket, ProtocolVersion], unknown_command, Data) ->
    yaws_api:websocket_send(WebSocket, ProtocolVersion, json_encode(""));
reply([WebSocket, ProtocolVersion], Msg, Data) ->
    Reply = get_reply(Msg, Data),
    yaws_api:websocket_send(WebSocket, ProtocolVersion, Reply).

get_reply(Msg, Data) ->
    case Msg of
        {register, success} -> register_success();
        {register, invalid_data} ->	json_encode("");
        {login, success} -> login_success(Data);
        {login, invalid_data} -> login_invalid_data();
        {get_session_user, success} -> get_session_user_success(Data);
        {get_session_user, invalid_data} -> get_session_user_invalid_data();
        {get_session_user,invalid_session} ->
            get_session_user_invalid_session();
        {update_user, success} -> update_user_success(Data);
        {update_user, invalid_data} -> update_user_invalid_data();
        {get_game, success} -> get_game_success(Data);
        {get_game, invalid_data} -> get_game_invalid_data();
        {create_game, success} -> create_game_success(Data);
        {create_game, invalid_data} -> create_game_invalid_data();
        {reconfig_game, success} -> reconfig_game_success(Data);
        {reconfig_game, invalid_data} -> reconfig_game_invalid_data();
        {join_game, success} -> join_game_success(Data);
        {join_game, error} -> join_game_error(Data);
        {join_game,invalid_data} -> join_game_invalid_data(Data);
        {game_overview, success} -> game_overview_success(Data);
        {Cmd, parse_error} -> json_encode("");
        _ -> io:format("Unimplemented call ~p~n", [Msg])
    end.

%%-------------------------------------------------------------------
%% Functions that handle return data
%%-------------------------------------------------------------------
%% @doc
%% Format for returning messages to the client
%%
%% event: Name of the event used by js callbacks to make changes to web page
%% event_data: Encoded data that may be relevant for the event
%% page: The page that has to be loaded on the client
%% message_type: Type of message to be displayed (optional)
%%               success, error, warning, info
%%  message_data: Data to be displayed as the message
%% @end
%%-------------------------------------------------------------------
register_success() ->
    R = [{"event", "register_success"},
         {"event_data", ""},
         {"page", "home"},
         {"message_type", "success"},
         {"message_value", "Registration successful."
                           " Please login to continue."}
        ],
    json_encode(R).

register_invalid_data() ->
    R = [{"event", "register_invalid_data"},
         {"event_data", ""},
         {"page", "register"},
         {"message_type", "error"},
         {"message_value", "An error occurred during registration."
                           " Please try after some time."}
        ],
    json_encode(R).

login_success(Session) ->
    Data = [{"session_id", Session}],
    R = [{"event", "login_success"},
         {"event_data", json2:obj_from_list(Data)},
         {"page", "dashboard"},
         {"message_type", "success"},
         {"message_value", "You are now logged in!"}],
    json_encode(R).

login_invalid_data() ->
    R = [{"event", "login_invalid_data"},
         {"event_data", ""},
         {"page", ""},
         {"message_type", "error"},
         {"message_value", "Invalid login data."
                           " Please check your nick and password"}],
    json_encode(R).

get_session_user_success(User) ->
    RequiredFields = ["nick", "email", "name"],
    Data = data_format:userrec_to_proplist(User, {string, RequiredFields}),
    R = [{"event", "get_session_user_success"},
         {"event_data", json2:obj_from_list(Data)},
         {"page", "dashboard"},
         {"message_type", ""},
         {"message_value", ""}],
    json_encode(R).

get_session_user_invalid_data() ->
    R = [{"event", "get_session_user_invalid_data"},
         {"event_data", ""},
         {"page", ""},
         {"message_type", "error"},
         {"message_value", "Session invalid."
                           " Please login to continue."}],
    json_encode(R).

get_session_user_invalid_session() ->
    R = [{"event", "get_session_user_invalid_session"},
         {"event_data", ""},
         {"page", ""},
         {"message_type", "error"},
         {"message_value", "Session invalid."
                           " Please login to continue."}],
    json_encode(R).

update_user_success(User) ->
    RequiredFields = ["nick", "email", "name"],
    Data = data_format:userrec_to_proplist(User, {string, RequiredFields}),
    R = [{"event", "update_user_success"},
         {"event_data", json2:obj_from_list(Data)},
         {"page", "dashboard"},
         {"message_type", "success"},
         {"message_value", "Your information was updated successfully."}],
    json_encode(R).

update_user_invalid_data() ->
    R = [{"event", "update_user_invalid_data"},
         {"event_data", ""},
         {"page", ""},
         {"message_type", "error"},
         {"message_value", "An error occurred during information update."
                           " Please try after some time."}
        ],
    json_encode(R).

get_game_success(Game) ->
    RequiredFields = ["id", "creator_id", "name", "description", "password",
                      "press", "order_phase", "retreat_phase", "build_phase",
                      "waiting_time", "num_players", "result"],
    Data = data_format:gamerec_to_proplist(Game, {string, RequiredFields}),
    R = [{"event", "get_game_success"},
         {"event_data", json2:obj_from_list(Data)},
         {"page", ""},
         {"message_type", ""},
         {"message_value", ""}],
    json_encode(R).

get_game_invalid_data() ->
    R = [{"event", "get_game_invalid_data"},
         {"event_data", ""},
         {"page", ""},
         {"message_type", "error"},
         {"message_value", "Game with specified Id not found in the database"}],
    json_encode(R).

reconfig_game_success(Game) ->
    R = [{"event", "reconfig_game_success"},
         {"event_data", ""},
         {"page", "dashboard"},
         {"message_type", "success"},
         {"message_value", "Game reconfigured successfully."}],
    json_encode(R).

reconfig_game_invalid_data() ->
    R = [{"event", "get_game_invalid_data"},
         {"event_data", ""},
         {"page", ""},
         {"message_type", "error"},
         {"message_value", "There was a problem reconfiguring the game."
                           " Please try again after some time"}],
    json_encode(R).

create_game_success(GameId) ->
    Msg = string:concat("Game created successfully, GameId = ",
                        integer_to_list(GameId)),
    R = [{"event", "create_game_success"},
         {"event_data", ""},
         {"page", "dashboard"},
         {"message_type", "success"},
         {"message_value", Msg}],
    json_encode(R).

create_game_invalid_data() ->
    R = [{"event", "update_user_invalid_data"},
         {"event_data", ""},
         {"page", ""},
         {"message_type", "error"},
         {"message_value", "An error occurred during creation of the game."
                           " Please try after some time."}
        ],
    json_encode(R).


join_game_success(GameId) ->
    Msg = string:concat("Game joined successfully, GameId = ",
                        integer_to_list(GameId)),
    R = [{"event", "join_game_success"},
         {"event_data", ""},
         {"page", "dashboard"},
         {"message_type", "success"},
         {"message_value", Msg}],
    json_encode(R).

join_game_error(_Error) ->
    R = [{"event", "join_game_error"},
         {"event_data", ""},
         {"page", "dashboard"},
         {"message_type", "error"},
         {"message_value", "Unknown error occurred. Please try again."}],
    json_encode(R).

join_game_invalid_data(Error) ->
    case Error of
        country_not_available ->
            Msg = "The selected country is already taken. Choose another.";
        user_already_joined ->
            Msg = "You have already joined this game.";
        _ ->
            Msg = "Unknown error. Please try again."
    end,
    R = [{"event", "join_game_invalid_data"},
         {"event_data", ""},
         {"page", "dashboard"},
         {"message_type", "error"},
         {"message_value", Msg}],
    json_encode(R).

game_overview_success(GOv) ->
    {Country, Game, Provinces, Units} = data_format:game_overview_to_text(GOv),
    Data = [{"country", atom_to_list(Country)},
            {"game", lists:flatten(Game)},
            {"provinces", lists:flatten(Provinces)},
            {"units", lists:flatten(Units)}],
    R = [{"event", "game_overview_success"},
         {"event_data", json2:obj_from_list(Data)},
         {"page", "game_overview"},
         {"message_type", ""},
         {"message_value", ""}],
    json_encode(R).

%% Convert data from websocket (JSON) to erlang terms
json_decode(Data) ->
    json2:decode_string(binary_to_list(Data)).


%% Convert erlang terms to JSON
json_encode(Data) ->
    list_to_binary(json2:encode(json2:obj_from_list(Data))).
</erl>