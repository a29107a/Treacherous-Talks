<erl>
%%%-------------------------------------------------------------------
%%% @copyright
%%% COPYRIGHT
%%% @end
%%%-------------------------------------------------------------------
%%% @author Sukumar Yethadka <sbhat7@gmail.com>
%%%
%%% @doc Websocket endpoint
%%%
%%% @since : 25 Oct 2011 by Bermuda Triangle
%%% @end
%%%-------------------------------------------------------------------

%%-------------------------------------------------------------------
%% Record defines the return value to the web socket
%%
%% event: Name of the event used by js callbacks to make changes to web page
%% event_data: Encoded data that may be relevant for the event
%% page: The page that has to be loaded on the client
%% message_type: Type of message to be displayed (optional)
%%               success, error, warning, info
%% message_value: Data to be displayed as the message
%%-------------------------------------------------------------------
-record(ret, {event="",
              event_data="",
              page="",
              message_type="",
              message_value=""}).

-include_lib("datatypes/include/push_receiver.hrl").
-include_lib("datatypes/include/push_event.hrl").
-include_lib("datatypes/include/message.hrl").
-include_lib("datatypes/include/game.hrl").


%%-------------------------------------------------------------------
%% @doc
%% Yaws function that gets called when an endpoint is requested.
%% The function creates a process for every websocket connection.
%% @end
%%-------------------------------------------------------------------
out(A) ->
    io:format("Spawning websocket owner~n",[]),
    WebSocketOwner = spawn(fun() -> websocket_owner() end),
    {websocket, WebSocketOwner, true}.


%%-------------------------------------------------------------------
%% @doc
%% Websocket owner - function to start the websocket server
%% @end
%%-------------------------------------------------------------------
websocket_owner() ->
    receive
    {ok, WebSocket, ProtocolVersion} ->
        socket_server(WebSocket, ProtocolVersion);
    _ -> ok
    end.


%%-------------------------------------------------------------------
%% @doc
%% Websocket server
%% @end
%%-------------------------------------------------------------------
socket_server(WebSocket, ProtocolVersion) ->
    receive
        {tcp, WebSocket, DataFrame} ->
            Data = yaws_api:websocket_unframe_data(ProtocolVersion, DataFrame),
            io:format("Got data from Websocket: ~p~n", [json_decode(Data)]),
            ParsedCmd = case web_parser:parse(json_decode(Data)) of
                            {login, {ok, User}} ->
                                {login, {ok, {User,
                                push_receiver(WebSocket, ProtocolVersion)}}};
                            {set_push_receiver, {ok, SessionId}} ->
                                {set_push_receiver, {ok, SessionId,
                                    push_receiver(WebSocket, ProtocolVersion)}};
                            Other ->
                                Other
                        end,
            io:format("ParsedCmd: ~p~n", [ParsedCmd]),
            controller:handle_action(ParsedCmd,
                                     {fun reply/3,
                                     [WebSocket, ProtocolVersion]}),
            socket_server(WebSocket, ProtocolVersion);
        {tcp_closed, WebSocket} ->
            io:format("Websocket closed. Terminating socket_server...~n");
        {push, [Websocket, ProtocolVersion], Event} = P ->
            case Event of
                #push_event{type = Type, data = Msg} ->
                    reply ([WebSocket, ProtocolVersion], Type, Msg);
                _ ->
                    io:format("received illegal push: ~p~n", [P]),
                    ok
            end,
            socket_server(WebSocket, ProtocolVersion);
        Any ->
            io:format("socket_server received unhandled msg:~p~n", [Any]),
            socket_server(WebSocket, ProtocolVersion)
    end.

%%-------------------------------------------------------------------
%% @doc
%% Callback function that gets called by controller
%% @end
%%-------------------------------------------------------------------
reply([WebSocket, ProtocolVersion], Result, Data) ->
    Reply = get_reply(Result, Data, fe_messages:get(Result, Data)),
    yaws_api:websocket_send(WebSocket, ProtocolVersion, Reply).

%%-------------------------------------------------------------------
%% Compose replies based on data returned from backend
%%-------------------------------------------------------------------
get_reply({Cmd, Status}, Data, Msg) ->
    Event = atom_to_list(Cmd) ++ "_" ++ atom_to_list(Status),
    Reply = get_ret({Cmd, Status}, #ret{event=Event, message_value=Msg}, Data),
    json_encode(ret_to_proplist(Reply));
get_reply (CmdWithoutStatus, Data, Msg) ->
    get_reply({CmdWithoutStatus, ok}, Data, Msg);
get_reply(unknown_command, Data, Msg) ->
    io:format("Unknown command ~p~n", [Data]),
    json_encode("").


%%-------------------------------------------------------------------
%% Functions that handle return data
%%-------------------------------------------------------------------
%% @doc
%% Format for returning messages to the client
%% Returns the updated ret record
%% @end
%%-------------------------------------------------------------------
%% Update message type to success
msg_success(Ret=#ret{}) ->
    Ret#ret{message_type="success"}.

%% Update message type to error
msg_error(Ret=#ret{}) ->
    Ret#ret{message_type="error"}.

%% Update message type to warning
msg_warning(Ret=#ret{}) ->
    Ret#ret{message_type="warning"}.

msg_ret (Ret=#ret{}, MsgType) ->
    Ret#ret{message_type = MsgType}.

msg_invisible (Ret=#ret{}) ->
    Ret#ret{message_type="invisible"}.

get_ret ({user_msg, success}, Ret, _Data) ->
    msg_invisible(Ret);
get_ret ({off_game_msg, ok}, Ret, Msg) ->
    Proplist = [{"from_nick", Msg#message.from_nick},
                {"content", Msg#message.content}],
    EventData = json2:obj_from_list(Proplist),
    msg_invisible(Ret#ret{event_data = EventData});

get_ret ({game_msg, success}, Ret, _Data) ->
    msg_invisible(Ret);
get_ret ({game_msg, invalid_data}, Ret, _Data) ->
    msg_error(Ret);
get_ret ({power_msg, success}, Ret, _Data) ->
    msg_invisible(Ret);
get_ret ({power_msg, invalid_data}, Ret, _Data) ->
    msg_error(Ret);
get_ret ({in_game_msg, ok}, Ret, GMsg) ->
    PropList = [{"from_country", atom_to_list(GMsg#game_message.from_country)},
               {"content", GMsg#game_message.content},
               {"game_id", GMsg#game_message.game_id}],
    EventData = json2:obj_from_list(PropList),
    msg_invisible(Ret#ret{event_data = EventData});

get_ret({register, success}, Ret=#ret{}, _Data) ->
    msg_success(Ret#ret{page="home"});
get_ret({register, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({login, success}, Ret=#ret{}, Session) ->
    Data = [{"session_id", Session}],
    EventData = json2:obj_from_list(Data),
    msg_success(Ret#ret{event_data = EventData,
                        page="dashboard"});
get_ret({login, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({get_session_user, success}, Ret=#ret{}, User) ->
    RequiredFields = [id, nick, email, name, role],
    Data = data_format:rec_to_plist(User, {string, RequiredFields}),
    EventData = json2:obj_from_list(Data),
    msg_success(Ret#ret{event_data = EventData,
                        page="dashboard"});
get_ret({get_session_user, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);
get_ret({get_session_user, invalid_session}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({update_user, success}, Ret=#ret{}, User) ->
    RequiredFields = [nick, email, name],
    Data = data_format:rec_to_plist(User, {string, RequiredFields}),
    EventData = json2:obj_from_list(Data),
    msg_success(Ret#ret{event_data = EventData,
                        page="dashboard"});
get_ret({update_user, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({get_game, success}, Ret=#ret{}, Game) ->
    RequiredFields = [id, creator_id, name, description, password,
                      press, order_phase, retreat_phase, build_phase,
                      waiting_time, num_players, result],
    Data = data_format:rec_to_plist(Game, {string, RequiredFields}),
    EventData = json2:obj_from_list(Data),
    msg_success(Ret#ret{event_data = EventData});
get_ret({get_game, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({reconfig_game, success}, Ret=#ret{}, _Data) ->
    msg_success(Ret#ret{page="dashboard"});
get_ret({reconfig_game, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({create_game, success}, Ret=#ret{}, _Data) ->
    msg_success(Ret#ret{page="dashboard"});
get_ret({create_game, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({join_game, success}, Ret=#ret{}, _Data) ->
    msg_success(Ret#ret{page="dashboard"});
get_ret({join_game, error}, Ret=#ret{}, _Data) ->
    msg_error(Ret#ret{page="dashboard"});
get_ret({join_game, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret#ret{page="dashboard"});

get_ret({game_overview, success}, Ret=#ret{}, Gov) ->
    game_overview_do_ret(Ret#ret{page="game"}, Gov);

get_ret({game_overview, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({operator_game_overview, success}, Ret=#ret{}, GovTree) ->
    operator_game_overview_ret(Ret, GovTree);
get_ret({operator_game_overview, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({operator_get_game_msg, success}, Ret=#ret{}, {GMsgList, msg_only}) ->
    SrtMsg = sort_by_date(GMsgList),
    MergedMsg = merge_redundant_msg(SrtMsg),
    Msg = [{struct, [{"from",atom_to_list(F)},{"to", term_to_string(T)}, {"content", M}]}
    ||#game_message{to_country=T, sender_country=F, content=M} <- MergedMsg],
    Data = [{"msg", Msg}, {"order", ""}],
    EventData = json2:obj_from_list(Data),
    msg_invisible(Ret#ret{event_data = EventData});
get_ret({operator_get_game_msg, success}, Ret=#ret{}, {GMsgList, OrderList}) ->
    Order = term_to_string(OrderList),
    SrtGMsg = sort_by_date(GMsgList),
    SrtGMsg2 = sort_by_group(SrtGMsg),

    Msg = [{struct, [{"from",atom_to_list(F)},{"to", atom_to_list(T)}, {"content", M}]}
    ||#game_message{to_country=T, sender_country=F, content=M} <- SrtGMsg2],

    Data = [{"msg", Msg}, {"order", Order}],
    EventData = json2:obj_from_list(Data),
    msg_invisible(Ret#ret{event_data = EventData});

get_ret({operator_get_game_msg, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({game_order, success}, Ret=#ret{}, {_Key, Orders}) ->
    Proplist = [{"my_orders", interpret_orderlist(Orders)}],
    EventData = json2:obj_from_list(Proplist),
    msg_success(Ret#ret{event_data = EventData});
get_ret({game_order, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({get_db_stats, success}, Ret=#ret{}, DbStatsList) ->
    Proplist = all_db_stats_to_proplist(DbStatsList),
    EventData = json2:obj_from_list(Proplist),
    msg_invisible(Ret#ret{event_data = EventData, page = "database_status"});
get_ret({get_db_stats, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({get_games_ongoing, success}, Ret=#ret{}, GameList) ->
    EventData = GameList,
    msg_invisible(Ret#ret{event_data = EventData, page = "games_ongoing"});
get_ret({get_games_ongoing, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({games_current, success}, Ret=#ret{}, Games) ->
    RequiredFields = [id, name, status, description,
                      press, order_phase, retreat_phase, build_phase,
                      waiting_time, num_players, creator_id],
    EventData = lists:map(fun(Game) ->
                json2:obj_from_list(data_format:rec_to_plist(Game,
                                    {string, RequiredFields}))
                          end, Games),
    msg_success(Ret#ret{event_data = EventData,
                        page = "games_current"});
get_ret({games_current, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({assign_moderator, success}, Ret=#ret{}, _Data) ->
    msg_success(Ret);
get_ret({assign_moderator, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({stop_game, success}, Ret=#ret{}, _Data) ->
    msg_success(Ret);
get_ret({stop_game, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({get_system_status, success}, Ret=#ret{}, Data) ->
    PropList = [{"system_status", Data}],
    EventData = json2:obj_from_list(PropList),
    msg_invisible(Ret#ret{event_data = EventData,
                        page="system_status"});

get_ret({game_search, success}, Ret=#ret{}, Games) ->
    RequiredFields = [id, name, status, description,
                      press, order_phase, retreat_phase, build_phase,
                      waiting_time, num_players],
    EventData = lists:map(fun(Game) ->
        json2:obj_from_list(data_format:rec_to_plist(Game,
                                                     {string, RequiredFields}))
        end, Games),
    msg_success(Ret#ret{event_data = EventData});
get_ret({game_search, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({get_presence, success}, Ret=#ret{}, _Data) ->
    msg_success(Ret);
get_ret({get_presence, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({get_reports, success}, Ret=#ret{}, Reports) ->
    EventData =
        lists:map(
          fun(Report) ->
                  DateCreated = data_format:date_to_str(
                                  Report#report_message.date_created),
                  Data = [{"id",
                           Report#report_message.id},
                          {"Date",
                           lists:flatten(DateCreated)},
                          {"Type",
                           atom_to_list(Report#report_message.type)},
                          {"From User",
                           Report#report_message.from_nick},
                          {"Message",
                           Report#report_message.content}],
                  json2:obj_from_list(Data)
          end, Reports),
    msg_invisible(Ret#ret{event_data = EventData,
                          page = "report_inbox"});
get_ret({get_reports, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({mark_report_as_done, success}, Ret=#ret{}, _Data) ->
    msg_success(Ret);
get_ret({mark_report_as_done, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret ({send_report, success}, Ret, _Data) ->
    msg_success(Ret#ret{page="user_help"});
get_ret ({send_report, invalid_data}, Ret, _Data) ->
    msg_error(Ret);

get_ret({set_push_receiver, success}, Ret=#ret{}, _Data) ->
    msg_success(Ret);
get_ret({set_push_receiver, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({logout, success}, Ret=#ret{}, _Data) ->
    msg_success(Ret);
get_ret({logout, invalid_data}, Ret=#ret{}, _Data) ->
    msg_error(Ret);

get_ret({phase_change, ok}, Ret=#ret{}, Data) ->
    game_overview_do_ret(Ret, Data);

% General unhandled case
get_ret({Cmd, Status}, Ret=#ret{}, _Data) ->
    Msg = lists:flatten(io_lib:format("Event unhandled in endpoint. {~p, ~p}."
                                      "Message: ~p,",
                        [Cmd, Status, Ret#ret.message_value])),
    msg_warning(Ret#ret{message_value=Msg}).

%% Convert data from websocket (JSON) to erlang terms
json_decode(Data) ->
    json2:decode_string(binary_to_list(Data)).

%% Convert erlang terms to JSON
json_encode(Data) ->
    list_to_binary(json2:encode(json2:obj_from_list(Data))).

%% Converts ret record to proplist
ret_to_proplist(Ret) ->
    RecordInfo = [atom_to_list(Field) || Field <- record_info(fields, ret)],
    lists:zip(RecordInfo, tl(tuple_to_list(Ret))).

game_overview_do_ret(Ret = #ret{}, Gov) ->
    Game = Gov#game_overview.game_rec,
    Map = digraph_io:from_erlang_term(Gov#game_overview.map),
    PlayerCountry = Gov#game_overview.country,
    {PUnit, Slist, Ulist} = interpret_map(Map, PlayerCountry),
    {Year, Season} = Gov#game_overview.year_season,
    Status = Game#game.status,
    CommonData = [
        {"game_name", Game#game.name},
        {"game_status", atom_to_list(Status)},
        {"game_id", integer_to_list(Game#game.id)},
        {"year", integer_to_list(Year)},
        {"season", atom_to_list(Season)},
        {"phase", atom_to_list(Gov#game_overview.phase)},
        {"country", atom_to_list(PlayerCountry)},
        {"press", atom_to_list(Game#game.press)},
        {"order_phase", integer_to_list(Game#game.order_phase)},
        {"retreat_phase", integer_to_list(Game#game.retreat_phase)},
        {"build_phase", integer_to_list(Game#game.build_phase)},
        {"waiting_time", integer_to_list(Game#game.waiting_time)},
        {"number_of_players", integer_to_list(Game#game.num_players)},
        {"description", Game#game.description},
        {"owner_list", {struct, Slist}},
        {"unit_list", {struct, Ulist}},
        {"date_created",
          lists:flatten(data_format:date_to_str(Game#game.date_created))}],
    Data = case Status of
        ongoing ->
            CommonData ++ [
            {"player_units", {struct, PUnit}},
            {"orders", interpret_orderlist(Gov#game_overview.order_list)}];
        finished ->
            CommonData ++ [
            {"date_completed",
              lists:flatten(data_format:date_to_str(Game#game.date_completed))},
            {"result", atom_to_list(Game#game.result)},
            {"players", term_to_string(Gov#game_overview.players)}];
        _ ->
            CommonData
    end,
    EventData = json2:obj_from_list(Data),
    io:format(user, "~p~n", [EventData]),
    msg_success(Ret#ret{event_data = EventData}).

all_db_stats_to_proplist(DbStatsList) ->
    all_db_stats_to_proplist(DbStatsList, 0, []).
all_db_stats_to_proplist([], Total, Acc) ->
    [{"db_count", integer_to_list(Total)}| Acc];
all_db_stats_to_proplist([{ok, Json}| Rest], Num, Acc) ->
    all_db_stats_to_proplist(Rest, Num+1,
      [{"db_stats" ++ integer_to_list(Num), Json}| Acc]).

tree_to_json_proplist(Tree) ->
    [{integer_to_list(Year),
      {struct, [{atom_to_list(Season)++"-"++atom_to_list(Phase),
                       {array, [atom_to_list(Country)||Country<-CountryList]}}
                || {{Season,Phase},CountryList} <- SPList]}}
    || {Year, SPList} <- Tree].

operator_game_overview_ret(Ret, {Gov, Tree}) ->
    Game = Gov#game_overview.game_rec,
    {{Year, Season}, Proplist} =
        case Tree of
            [] ->
                {{1901, spring},[]};
            _ ->
                {Gov#game_overview.year_season, tree_to_json_proplist(Tree)}
        end,
    TimeComplete = case Game#game.date_completed of
            undefined -> "Not finished yet";
            {{_,_,_},{_,_,_}} -> lists:flatten(data_format:date_to_str(Game#game.date_created));
            _ -> "Error"
        end,
    Data = [{"game_id", integer_to_list(Game#game.id)},
            {"game_status", atom_to_list(Game#game.status)},
            {"year_season", integer_to_list(Year)++"-"++atom_to_list(Season)},
            {"players", interpret_players(Gov#game_overview.players)},
            {"game_name", Game#game.name},
            {"creator_id", integer_to_list(Game#game.creator_id)},
            {"press", atom_to_list(Game#game.press)},
            {"order_phase", integer_to_list(Game#game.order_phase)},
            {"retreat_phase", integer_to_list(Game#game.retreat_phase)},
            {"build_phase", integer_to_list(Game#game.build_phase)},
            {"num_players", integer_to_list(Game#game.num_players)},
            {"description", Game#game.description},
            {"password", Game#game.password},
            {"result", atom_to_list(Game#game.result)},
            {"waiting_time", integer_to_list(Game#game.waiting_time)},
            {"date_created",
              lists:flatten(data_format:date_to_str(Game#game.date_created))},
            {"date_completed", TimeComplete},
            {"start_time", term_to_string(Game#game.start_time)},
            {"last_session", Game#game.last_session},
            {"links", {struct, Proplist}}
           ],
    EventData = json2:obj_from_list(Data),
    msg_success(Ret#ret{event_data = EventData,
                        page="operator_gov"}).

term_to_string(Term) ->
    lists:flatten(io_lib:format("~p", [Term])).

sort_by_date(GMsgList) ->
    SortByDate = fun(X, Y)->
                     X#game_message.date_created > Y#game_message.date_created
                  end,
    lists:sort(SortByDate ,GMsgList).

sort_by_group(SrtGMsg) ->
    SortByGroup = fun(X, Y)->
                     X#game_message.status < Y#game_message.status
                  end,
    Grouping = fun(X, Y)->
        case X > Y of
          true -> {X, Y};
          false -> {Y, X}
        end
    end,
    GroupedMsg = [Msg1#game_message{status=Grouping(Msg1#game_message.sender_country,
      Msg1#game_message.to_country)} || Msg1 <- SrtGMsg],
    lists:sort(SortByGroup ,GroupedMsg).

merge_redundant_msg(SrtMsg) ->
    Fun = fun(M, {Acc, LastGroup}) ->
        CurrentGroup = M#game_message.group_id,
        case LastGroup == CurrentGroup of
            true ->
                [H|Rest] = Acc,
                LastTo = H#game_message.to_country,
                CurrentTo = M#game_message.to_country,
                case is_list(LastTo) of
                    true -> {[M#game_message{to_country=
                      [CurrentTo|LastTo]}|Rest], CurrentGroup};
                    false -> {[M#game_message{to_country=
                      [CurrentTo, LastTo]}|Rest], CurrentGroup}
                end;
            false ->
                {[M|Acc], CurrentGroup}
        end
    end,
    {MergedMsg, _} = lists:foldl(Fun, {[], undefined}, SrtMsg),
    MergedMsg.

push_receiver(WebSocket, ProtocolVersion) ->
    PushReceiver = #push_receiver{
      pid = self(),
      args = [WebSocket, ProtocolVersion],
      type = web}.

interpret_orderlist(OrdList) ->
    [begin
        case X of
            {hold, {U1, _}, L1} ->
                {struct, [
                    {"u1", atom_to_list(U1)},
                    {"l1", atom_to_list(L1)},
                    {"action", "hold"}
                ]};
            {move, {U1, _}, L1, L2} ->
                {struct, [
                    {"u1", atom_to_list(U1)},
                    {"l1", atom_to_list(L1)},
                    {"action", "move"},
                    {"l2", atom_to_list(L2)}
                ]};
            {support, {U1, _}, L1, {move, {U2, _}, L2, L3}} ->
                {struct, [
                    {"u1", atom_to_list(U1)},
                    {"l1", atom_to_list(L1)},
                    {"action", "support_move"},
                    {"u2", atom_to_list(U2)},
                    {"l2", atom_to_list(L2)},
                    {"l3", atom_to_list(L3)}
                ]};
            {support, {U1, _}, L1, {hold, {U2, _}, L2}} ->
                {struct, [
                    {"action", "support_hold"},
                    {"u1", atom_to_list(U1)},
                    {"u2", atom_to_list(U2)},
                    {"l1", atom_to_list(L1)},
                    {"l2", atom_to_list(L2)}
                ]};
            {disband,{U1,_}, L1} ->
                {struct, [
                    {"action", "disband"},
                    {"u1", atom_to_list(U1)},
                    {"l1", atom_to_list(L1)}
                ]};
            {build,{U1,_}, L1} ->
                {struct, [
                    {"action", "build"},
                    {"u1", atom_to_list(U1)},
                    {"l1", atom_to_list(L1)}
                ]};
            {convoy, {fleet,_},L1,{army,_}, L2, L3} ->
                {struct, [
                    {"u1", "fleet"},
                    {"l1", atom_to_list(L1)},
                    {"action", "convoy"},
                    {"u2", "army"},
                    {"l2", atom_to_list(L2)},
                    {"l3", atom_to_list(L3)}
                ]}
        end
    end || X <- OrdList].

interpret_map(Map, PCountry) ->
    Prov = map:get_provinces(Map),
    Unit = map:get_units(Map),
    PUnit = lists:foldl(fun({P1,{U1,C1}}, Acc1)->
        case C1 of
            PCountry ->
                [{atom_to_list(P1),atom_to_list(U1)}|Acc1];
            _ ->
                Acc1
        end end, [], Unit),

    Ulist = [{atom_to_list(P)++"__"++atom_to_list(C), atom_to_list(U)}
    || {P,{U,C}} <- Unit],
    Fun = fun(X, Acc) ->
        case map:get_province_info(Map,X, center) of
            true ->
                case map:get_province_info(Map,X,owner) of
                    undefined ->
                        Acc;
                    Owner ->
                        [{atom_to_list(X), atom_to_list(Owner)}|Acc]
                end;
            _ -> Acc
        end
    end,
    Slist = lists:foldl(Fun, [], Prov),
    {PUnit, Slist, Ulist}.

interpret_players(#game_player{players=PlayerList})->
    {struct, [{atom_to_list(C), integer_to_list(Id)}
    || #game_user{id=Id, country=C} <- PlayerList]}.


</erl>
